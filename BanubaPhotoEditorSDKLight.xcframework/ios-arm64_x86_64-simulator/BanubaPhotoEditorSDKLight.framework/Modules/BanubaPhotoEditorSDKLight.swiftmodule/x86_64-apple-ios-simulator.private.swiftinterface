// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target x86_64-apple-ios15.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name BanubaPhotoEditorSDKLight
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AVFoundation
import Accelerate
import AudioToolbox
import BNBSdkApi
import BNBSdkCore
import BanubaLicenseServicingSDK
@_exported import BanubaPhotoEditorSDKLight
import BanubaUtilities
import CoreGraphics
import DeveloperToolsSupport
import Foundation
import Photos
import PhotosUI
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class AlbumPreviewCollectionViewCell : UIKit.UICollectionViewCell {
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func awakeFromNib()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func prepareForReuse()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public struct PhotoEditorConfig {
  public enum PreviewScreenMode {
    case disabled
    case enabled(previewScreenConfiguration: BanubaPhotoEditorSDKLight.PreviewScreenConfiguration)
  }
  public var editorScreenConfiguration: BanubaPhotoEditorSDKLight.EditorScreenConfiguration
  public var previewScreenMode: BanubaPhotoEditorSDKLight.PhotoEditorConfig.PreviewScreenMode
  public var resourcesURL: Foundation.URL
  public static var defaultResourcesBundleURL: Foundation.URL {
    get
  }
  public init()
  public init(editorScreenConfiguration: BanubaPhotoEditorSDKLight.EditorScreenConfiguration = .init(), previewScreenMode: BanubaPhotoEditorSDKLight.PhotoEditorConfig.PreviewScreenMode, resourcesURL: Foundation.URL = Self.defaultResourcesBundleURL)
}
public struct EditorScreenConfiguration {
  public var saveResultToPhotoLibrary: Swift.Bool
  public init(saveResultToPhotoLibrary: Swift.Bool)
  public init()
}
public struct PreviewScreenConfiguration {
  public enum ShareButtonsMode : Swift.Equatable {
    case disabled
    case enabled(shareButtonsConfiguration: BanubaPhotoEditorSDKLight.ShareButtonsConfiguration)
    public static func == (a: BanubaPhotoEditorSDKLight.PreviewScreenConfiguration.ShareButtonsMode, b: BanubaPhotoEditorSDKLight.PreviewScreenConfiguration.ShareButtonsMode) -> Swift.Bool
  }
  public var closeButtonConfiguration: ((UIKit.UIButton) -> ())?
  public var shareButtonsMode: BanubaPhotoEditorSDKLight.PreviewScreenConfiguration.ShareButtonsMode
  public init(shareButtonsMode: BanubaPhotoEditorSDKLight.PreviewScreenConfiguration.ShareButtonsMode, closeButtonConfiguration: ((UIKit.UIButton) -> ())? = nil)
  public init()
}
public struct ShareButtonsConfiguration : Swift.Equatable {
  public var facebookId: Swift.String
  public init(facebookId: Swift.String)
  public init()
  public static func == (a: BanubaPhotoEditorSDKLight.ShareButtonsConfiguration, b: BanubaPhotoEditorSDKLight.ShareButtonsConfiguration) -> Swift.Bool
}
public enum PhotoEditorEntryPoint {
  case gallery
  case editorWithImage(UIKit.UIImage)
  case editorWithURL(Foundation.URL)
}
public struct PhotoEditorLaunchConfig {
  public var hostController: UIKit.UIViewController
  public var entryPoint: BanubaPhotoEditorSDKLight.PhotoEditorEntryPoint
  public init(hostController: UIKit.UIViewController, entryPoint: BanubaPhotoEditorSDKLight.PhotoEditorEntryPoint = .gallery)
}
public protocol BanubaPhotoEditorDelegate : AnyObject {
  func photoEditorDidCancel(_ photoEditor: BanubaPhotoEditorSDKLight.BanubaPhotoEditor)
  func photoEditorDidFinishWithImage(_ photoEditor: BanubaPhotoEditorSDKLight.BanubaPhotoEditor, image: UIKit.UIImage)
}
public class BanubaPhotoEditor {
  weak public var delegate: (any BanubaPhotoEditorSDKLight.BanubaPhotoEditorDelegate)?
  public init?(token: Swift.String, configuration: BanubaPhotoEditorSDKLight.PhotoEditorConfig)
  @objc deinit
  public func presentPhotoEditor(withLaunchConfiguration configuration: BanubaPhotoEditorSDKLight.PhotoEditorLaunchConfig, completion: (() -> Swift.Void)?)
  public func dismissPhotoEditor(animated: Swift.Bool, completion: (() -> Swift.Void)?)
  public func getLicenseState(completion: @escaping ((Swift.Bool) -> Swift.Void))
}
